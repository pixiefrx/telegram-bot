import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import os

# --- –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
API_TOKEN = os.getenv("API_TOKEN")  # –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not API_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ü–ê–ú–Ø–¢–¨ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –∑–∞–π–º–∞ ---
pending_loans = {}  # {user_id: amount}
waiting_complaint = set()  # —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—à—É—Ç –∂–∞–ª–æ–±—É
waiting_restore = set()  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
def init_db():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        phone TEXT
    )
    """)

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS loans (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount INTEGER,
        phone TEXT
    )
    """)

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS complaints (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        message TEXT
    )
    """)

    conn.commit()
    conn.close()


def save_user_contact(user_id, username, phone, loan_amount=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É: –µ—Å–ª–∏ loan_amount —É–∫–∞–∑–∞–Ω ‚Äî —ç—Ç–æ –º–∏–∫—Ä–æ–∑–∞–π–º, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç"""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO users (user_id, username, phone) VALUES (?, ?, ?)",
                   (user_id, username, phone))
    if loan_amount:
        cursor.execute("INSERT INTO loans (user_id, amount, phone) VALUES (?, ?, ?)",
                       (user_id, loan_amount, phone))
    conn.commit()
    conn.close()


def save_complaint(user_id, username, message):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO complaints (user_id, username, message) VALUES (?, ?, ?)",
                   (user_id, username, message))
    conn.commit()
    conn.close()


# --- –ö–ù–û–ü–ö–ò ---
def main_menu():
    keyboard = [
        [types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—Éüì±")],
        [types.KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ú–∏–∫—Ä–æ–∑–∞–π–º—ã üí∏")],
        [types.KeyboardButton(text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è ‚ö†Ô∏è")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def loan_menu():
    keyboard = [
        [types.KeyboardButton(text="2 —Ä—É–±")],
        [types.KeyboardButton(text="349 —Ä—É–±")],
        [types.KeyboardButton(text="15 000 000 000 —Ç–µ–Ω–≥–µ")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def contact_button():
    keyboard = [
        [types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–ºüì±", request_contact=True)]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


# --- –•–≠–ù–î–õ–ï–†–´ ---
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–§–û –ö–†–ò–ó–ê–õ–ò–°! üëã\n"
        "–û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–π–º —Å–µ–≥–æ–¥–Ω—è - –∑–∞–≤—Ç—Ä–∞ –º—ã —Ä–∞–∑–¥–µ–Ω–µ–º –≤–∞—Å –¥–æ –∫–æ—Å—Ç–µ–π",
        reply_markup=main_menu()
    )


# --- –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê ---
@dp.message(F.contact)
async def contact_handler(message: types.Message):
    if message.contact:
        phone = message.contact.phone_number
        user_id = message.from_user.id
        username = message.from_user.username

        # –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –º–∏–∫—Ä–æ–∑–∞–π–º–∞
        if user_id in pending_loans:
            amount = pending_loans.pop(user_id)
            save_user_contact(user_id, username, phone, loan_amount=amount)
            await message.answer(f"–°–ø–∞—Å–∏–±–æ, –º–∏–∫—Ä–æ–∑–∞–π–º –Ω–∞ {amount} —Ä—É–± –æ—Ñ–æ—Ä–º–ª–µ–Ω ‚úÖ", reply_markup=main_menu())
        # –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
        elif user_id in waiting_restore:
            waiting_restore.remove(user_id)
            save_user_contact(user_id, username, phone)
            await message.answer("–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π!\n"
                                 "–° –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø—É—Å—Ç—å –ø–æ–ø—Ä–æ–±—É—é—Ç –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è",
                                 reply_markup=main_menu())
        else:
            save_user_contact(user_id, username, phone)
            await message.answer("–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π!\n"
                                 "–° –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø—É—Å—Ç—å –ø–æ–ø—Ä–æ–±—É—é—Ç –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è",
                                 reply_markup=main_menu())


# --- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –î–û–°–¢–£–ü–ê ---
@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—Éüì±")
async def restore_access(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="restore_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="restore_no")]
    ])
    await message.answer(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø –≥—Ä—É–ø–ø–µ –ö–†–ò–ó–ê–õ–ò–° –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "restore_yes")
async def restore_yes_callback(callback: types.CallbackQuery):
    waiting_restore.add(callback.from_user.id)
    await callback.message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º",
        reply_markup=contact_button()
    )
    await callback.answer()


@dp.callback_query(F.data == "restore_no")
async def restore_no_callback(callback: types.CallbackQuery):
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ, –º—ã —Ü–µ–Ω–∏–º –≤–∞—à –≤–∫–ª–∞–¥ –≤ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ!", reply_markup=main_menu())
    await callback.answer()


# --- –ú–ò–ö–†–û–ó–ê–ô–ú ---
@dp.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –ú–∏–∫—Ä–æ–∑–∞–π–º—ã üí∏")
async def loan_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –º–∏–∫—Ä–æ–∑–∞–π–º–∞:", reply_markup=loan_menu())


@dp.message(F.text.in_({"2 —Ä—É–±", "349 —Ä—É–±", "15 000 000 000 —Ç–µ–Ω–≥–µ"}))
async def choose_amount(message: types.Message):
    amount = int(message.text.split()[0])
    pending_loans[message.from_user.id] = amount
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {amount} —Ä—É–±.\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=contact_button()
    )


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


# --- –ñ–ê–õ–û–ë–ê ---
@dp.message(F.text == "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è ‚ö†Ô∏è")
async def complaint_start(message: types.Message):
    waiting_complaint.add(message.from_user.id)
    await message.answer("–í–º–µ—Å—Ç–æ –∑–∞–π–º–∞ –Ω–∞ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—é–¥–∞ –≤—Å–µ, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç\n"
                         "‚ùóÔ∏è–ñ–∞–ª–æ–±–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É, –æ–±–µ—â–∞–µ–º",
                         reply_markup=ReplyKeyboardRemove())


@dp.message(F.text)
async def complaint_save(message: types.Message):
    user_id = message.from_user.id
    if user_id in waiting_complaint:
        waiting_complaint.remove(user_id)
        save_complaint(user_id, message.from_user.username, message.text)
        await message.answer("–°–ø–∞—Å–∏–±–æ, –∂–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
                             "–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞—à –æ—Ç–µ—Ü –Ω–µ –∏—Å—á–µ–∑, –∫–∞–∫ —É –º–Ω–æ–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞üòä", reply_markup=main_menu())


# --- –ó–ê–ü–£–°–ö ---
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
