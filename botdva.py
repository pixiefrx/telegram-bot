import logging
import sqlite3
import asyncio
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# --- –¢–æ–∫–µ–Ω ---
API_TOKEN = os.getenv("API_TOKEN")  # –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ Railway Variables
if not API_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway!")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ ---
pending_loans = {}       # {user_id: amount}
waiting_complaint = set()
waiting_restore = set()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
def init_db():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        username TEXT,
        phone TEXT
    )
    """)

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS loans (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount INTEGER,
        phone TEXT
    )
    """)

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS complaints (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        message TEXT
    )
    """)

    conn.commit()
    conn.close()


def save_user_contact(user_id, username, phone, loan_amount=None):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR IGNORE INTO users (user_id, username, phone)
        VALUES (?, ?, ?)
    """, (user_id, username, phone))
    if loan_amount:
        cursor.execute("""
            INSERT INTO loans (user_id, amount, phone) VALUES (?, ?, ?)
        """, (user_id, loan_amount, phone))
    conn.commit()
    conn.close()


def save_complaint(user_id, username, message):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO complaints (user_id, username, message) VALUES (?, ?, ?)
    """, (user_id, username, message))
    conn.commit()
    conn.close()


# --- –ö–Ω–æ–ø–∫–∏ ---
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—Éüì±")],
            [types.KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ú–∏–∫—Ä–æ–∑–∞–π–º—ã üí∏")],
            [types.KeyboardButton(text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è ‚ö†Ô∏è")]
        ],
        resize_keyboard=True
    )


def loan_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="2 —Ä—É–±")],
            [types.KeyboardButton(text="349 —Ä—É–±")],
            [types.KeyboardButton(text="15000000 —Ä—É–±")],
            [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def contact_button():
    return ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–ºüì±", request_contact=True)]
        ],
        resize_keyboard=True
    )


# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–§–û –ö–†–ò–ó–ê–õ–ò–°! üëã\n"
        "–û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–π–º —Å–µ–≥–æ–¥–Ω—è - –∑–∞–≤—Ç—Ä–∞ –º—ã —Ä–∞–∑–¥–µ–Ω–µ–º –≤–∞—Å –¥–æ –∫–æ—Å—Ç–µ–π",
        reply_markup=main_menu()
    )


# --- –ö–æ–Ω—Ç–∞–∫—Ç ---
@dp.message(F.contact)
async def contact_handler(message: types.Message):
    phone = message.contact.phone_number
    user_id = message.from_user.id
    username = message.from_user.username

    if user_id in pending_loans:
        amount = pending_loans.pop(user_id)
        save_user_contact(user_id, username, phone, loan_amount=amount)
        await message.answer(f"‚úÖ –ú–∏–∫—Ä–æ–∑–∞–π–º –Ω–∞ {amount} —Ä—É–± –æ—Ñ–æ—Ä–º–ª–µ–Ω!", reply_markup=main_menu())
    elif user_id in waiting_restore:
        waiting_restore.remove(user_id)
        save_user_contact(user_id, username, phone)
        await message.answer("–î–æ—Å—Ç—É–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π!", reply_markup=main_menu())
    else:
        save_user_contact(user_id, username, phone)
        await message.answer("–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=main_menu())


# --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ ---
@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—Éüì±")
async def restore_access(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="restore_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="restore_no")]
    ])
    await message.answer("–í–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø? –í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=keyboard)


@dp.callback_query(F.data == "restore_yes")
async def restore_yes_callback(callback: types.CallbackQuery):
    waiting_restore.add(callback.from_user.id)
    await callback.message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_button())
    await callback.answer()


@dp.callback_query(F.data == "restore_no")
async def restore_no_callback(callback: types.CallbackQuery):
    await callback.message.answer("–û—Ç–º–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!", reply_markup=main_menu())
    await callback.answer()


# --- –ú–∏–∫—Ä–æ–∑–∞–π–º ---
@dp.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –ú–∏–∫—Ä–æ–∑–∞–π–º—ã üí∏")
async def loan_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:", reply_markup=loan_menu())


@dp.message(F.text.in_({"2 —Ä—É–±", "349 —Ä—É–±", "15000000 —Ä—É–±"}))
async def choose_amount(message: types.Message):
    try:
        amount = int(message.text.split()[0])
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
        return
    pending_loans[message.from_user.id] = amount
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {amount} —Ä—É–±.\n–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_button())


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


# --- –ñ–∞–ª–æ–±—ã ---
@dp.message(F.text == "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è ‚ö†Ô∏è")
async def complaint_start(message: types.Message):
    waiting_complaint.add(message.from_user.id)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É:", reply_markup=ReplyKeyboardRemove())


@dp.message(F.text)
async def complaint_save(message: types.Message):
    user_id = message.from_user.id
    if user_id in waiting_complaint:
        waiting_complaint.remove(user_id)
        save_complaint(user_id, message.from_user.username, message.text)
        await message.answer("–ñ–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ", reply_markup=main_menu())


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
